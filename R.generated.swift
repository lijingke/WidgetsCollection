//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.image` struct is generated, and contains static references to 66 images.
  struct image {
    /// Image `AlbumAddBtn`.
    static let albumAddBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "AlbumAddBtn")
    /// Image `Photo_delete`.
    static let photo_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "Photo_delete")
    /// Image `ProcessCompleted`.
    static let processCompleted = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProcessCompleted")
    /// Image `ProcessEdit`.
    static let processEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProcessEdit")
    /// Image `ProcessInProgress`.
    static let processInProgress = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProcessInProgress")
    /// Image `ProcessIncomplete`.
    static let processIncomplete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProcessIncomplete")
    /// Image `ProcessTips`.
    static let processTips = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProcessTips")
    /// Image `ProcessWait`.
    static let processWait = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProcessWait")
    /// Image `SpongeBob.gif`.
    static let spongeBobGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "SpongeBob.gif")
    /// Image `Van Gogh_Starry Night`.
    static let vanGogh_StarryNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Van Gogh_Starry Night")
    /// Image `arrow_down`.
    static let arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down")
    /// Image `arrow_up`.
    static let arrow_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_up")
    /// Image `arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow")
    /// Image `cat`.
    static let cat = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat")
    /// Image `chat_list_add`.
    static let chat_list_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_list_add")
    /// Image `chat_list_filter`.
    static let chat_list_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_list_filter")
    /// Image `chat_tools_add`.
    static let chat_tools_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_tools_add")
    /// Image `chat_tools_photo`.
    static let chat_tools_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_tools_photo")
    /// Image `chat_tools_pic`.
    static let chat_tools_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_tools_pic")
    /// Image `chat_tools_reply`.
    static let chat_tools_reply = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_tools_reply")
    /// Image `chat_tools_voice`.
    static let chat_tools_voice = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_tools_voice")
    /// Image `clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock")
    /// Image `cover_jrsy`.
    static let cover_jrsy = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover_jrsy")
    /// Image `cover_lb`.
    static let cover_lb = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover_lb")
    /// Image `cover_md`.
    static let cover_md = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover_md")
    /// Image `cover_mfb`.
    static let cover_mfb = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover_mfb")
    /// Image `cover_rxg`.
    static let cover_rxg = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover_rxg")
    /// Image `cover_szdsyyyt`.
    static let cover_szdsyyyt = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover_szdsyyyt")
    /// Image `cover_szqpz`.
    static let cover_szqpz = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover_szqpz")
    /// Image `cover_venereum`.
    static let cover_venereum = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover_venereum")
    /// Image `default_avatar_100`.
    static let default_avatar_100 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_100")
    /// Image `default_avatar_80`.
    static let default_avatar_80 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_80")
    /// Image `edit_delete`.
    static let edit_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_delete")
    /// Image `elephant`.
    static let elephant = Rswift.ImageResource(bundle: R.hostingBundle, name: "elephant")
    /// Image `icon_download`.
    static let icon_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_download")
    /// Image `icon_plus`.
    static let icon_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_plus")
    /// Image `icon_read`.
    static let icon_read = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_read")
    /// Image `img_00`.
    static let img_00 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_00")
    /// Image `img_01`.
    static let img_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_01")
    /// Image `img_02`.
    static let img_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_02")
    /// Image `img_03`.
    static let img_03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_03")
    /// Image `img_04`.
    static let img_04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_04")
    /// Image `img_05`.
    static let img_05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_05")
    /// Image `kt_sh`.
    static let kt_sh = Rswift.ImageResource(bundle: R.hostingBundle, name: "kt_sh")
    /// Image `loading.gif`.
    static let loadingGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading.gif")
    /// Image `member_add`.
    static let member_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "member_add")
    /// Image `nav_back_black`.
    static let nav_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_back_black")
    /// Image `option_radio_active`.
    static let option_radio_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "option_radio_active")
    /// Image `option_radio_normal`.
    static let option_radio_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "option_radio_normal")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `rabbit`.
    static let rabbit = Rswift.ImageResource(bundle: R.hostingBundle, name: "rabbit")
    /// Image `setting_add`.
    static let setting_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_add")
    /// Image `smile_face_1`.
    static let smile_face_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "smile_face_1")
    /// Image `smile_face_2`.
    static let smile_face_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "smile_face_2")
    /// Image `smile_neutral`.
    static let smile_neutral = Rswift.ImageResource(bundle: R.hostingBundle, name: "smile_neutral")
    /// Image `smile_rotten_1`.
    static let smile_rotten_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "smile_rotten_1")
    /// Image `smile_rotten_2`.
    static let smile_rotten_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "smile_rotten_2")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `start_button`.
    static let start_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_button")
    /// Image `tab_me_normal`.
    static let tab_me_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_me_normal")
    /// Image `tab_work_normal`.
    static let tab_work_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_work_normal")
    /// Image `voice1`.
    static let voice1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice1")
    /// Image `voice2`.
    static let voice2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice2")
    /// Image `voice3`.
    static let voice3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice3")
    /// Image `主页_我的`.
    static let 主页_我的 = Rswift.ImageResource(bundle: R.hostingBundle, name: "主页_我的")
    /// Image `对勾`.
    static let 对勾 = Rswift.ImageResource(bundle: R.hostingBundle, name: "对勾")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AlbumAddBtn", bundle: ..., traitCollection: ...)`
    static func albumAddBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.albumAddBtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Photo_delete", bundle: ..., traitCollection: ...)`
    static func photo_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProcessCompleted", bundle: ..., traitCollection: ...)`
    static func processCompleted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.processCompleted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProcessEdit", bundle: ..., traitCollection: ...)`
    static func processEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.processEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProcessInProgress", bundle: ..., traitCollection: ...)`
    static func processInProgress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.processInProgress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProcessIncomplete", bundle: ..., traitCollection: ...)`
    static func processIncomplete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.processIncomplete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProcessTips", bundle: ..., traitCollection: ...)`
    static func processTips(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.processTips, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProcessWait", bundle: ..., traitCollection: ...)`
    static func processWait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.processWait, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SpongeBob.gif", bundle: ..., traitCollection: ...)`
    static func spongeBobGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spongeBobGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Van Gogh_Starry Night", bundle: ..., traitCollection: ...)`
    static func vanGogh_StarryNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vanGogh_StarryNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_down", bundle: ..., traitCollection: ...)`
    static func arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_up", bundle: ..., traitCollection: ...)`
    static func arrow_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat", bundle: ..., traitCollection: ...)`
    static func cat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_list_add", bundle: ..., traitCollection: ...)`
    static func chat_list_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_list_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_list_filter", bundle: ..., traitCollection: ...)`
    static func chat_list_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_list_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_tools_add", bundle: ..., traitCollection: ...)`
    static func chat_tools_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_tools_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_tools_photo", bundle: ..., traitCollection: ...)`
    static func chat_tools_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_tools_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_tools_pic", bundle: ..., traitCollection: ...)`
    static func chat_tools_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_tools_pic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_tools_reply", bundle: ..., traitCollection: ...)`
    static func chat_tools_reply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_tools_reply, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_tools_voice", bundle: ..., traitCollection: ...)`
    static func chat_tools_voice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_tools_voice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cover_jrsy", bundle: ..., traitCollection: ...)`
    static func cover_jrsy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover_jrsy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cover_lb", bundle: ..., traitCollection: ...)`
    static func cover_lb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover_lb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cover_md", bundle: ..., traitCollection: ...)`
    static func cover_md(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover_md, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cover_mfb", bundle: ..., traitCollection: ...)`
    static func cover_mfb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover_mfb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cover_rxg", bundle: ..., traitCollection: ...)`
    static func cover_rxg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover_rxg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cover_szdsyyyt", bundle: ..., traitCollection: ...)`
    static func cover_szdsyyyt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover_szdsyyyt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cover_szqpz", bundle: ..., traitCollection: ...)`
    static func cover_szqpz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover_szqpz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cover_venereum", bundle: ..., traitCollection: ...)`
    static func cover_venereum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover_venereum, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "default_avatar_100", bundle: ..., traitCollection: ...)`
    static func default_avatar_100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_100, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "default_avatar_80", bundle: ..., traitCollection: ...)`
    static func default_avatar_80(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_80, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_delete", bundle: ..., traitCollection: ...)`
    static func edit_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "elephant", bundle: ..., traitCollection: ...)`
    static func elephant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.elephant, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_download", bundle: ..., traitCollection: ...)`
    static func icon_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_plus", bundle: ..., traitCollection: ...)`
    static func icon_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_read", bundle: ..., traitCollection: ...)`
    static func icon_read(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_read, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_00", bundle: ..., traitCollection: ...)`
    static func img_00(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_00, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_01", bundle: ..., traitCollection: ...)`
    static func img_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_02", bundle: ..., traitCollection: ...)`
    static func img_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_03", bundle: ..., traitCollection: ...)`
    static func img_03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_04", bundle: ..., traitCollection: ...)`
    static func img_04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_05", bundle: ..., traitCollection: ...)`
    static func img_05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kt_sh", bundle: ..., traitCollection: ...)`
    static func kt_sh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kt_sh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loading.gif", bundle: ..., traitCollection: ...)`
    static func loadingGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadingGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_add", bundle: ..., traitCollection: ...)`
    static func member_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_back_black", bundle: ..., traitCollection: ...)`
    static func nav_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "option_radio_active", bundle: ..., traitCollection: ...)`
    static func option_radio_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.option_radio_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "option_radio_normal", bundle: ..., traitCollection: ...)`
    static func option_radio_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.option_radio_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rabbit", bundle: ..., traitCollection: ...)`
    static func rabbit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rabbit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_add", bundle: ..., traitCollection: ...)`
    static func setting_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smile_face_1", bundle: ..., traitCollection: ...)`
    static func smile_face_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile_face_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smile_face_2", bundle: ..., traitCollection: ...)`
    static func smile_face_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile_face_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smile_neutral", bundle: ..., traitCollection: ...)`
    static func smile_neutral(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile_neutral, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smile_rotten_1", bundle: ..., traitCollection: ...)`
    static func smile_rotten_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile_rotten_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smile_rotten_2", bundle: ..., traitCollection: ...)`
    static func smile_rotten_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile_rotten_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_button", bundle: ..., traitCollection: ...)`
    static func start_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_me_normal", bundle: ..., traitCollection: ...)`
    static func tab_me_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_me_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_work_normal", bundle: ..., traitCollection: ...)`
    static func tab_work_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_work_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice1", bundle: ..., traitCollection: ...)`
    static func voice1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice2", bundle: ..., traitCollection: ...)`
    static func voice2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice3", bundle: ..., traitCollection: ...)`
    static func voice3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "主页_我的", bundle: ..., traitCollection: ...)`
    static func 主页_我的(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.主页_我的, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "对勾", bundle: ..., traitCollection: ...)`
    static func 对勾(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.对勾, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
